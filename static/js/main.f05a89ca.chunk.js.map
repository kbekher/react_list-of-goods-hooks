{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","empty","sortBy","setSortBy","isReversed","setIsReversed","visibleGoods","goods","reverse","preparedGoods","name","sort","good1","good2","localeCompare","length","getSortedGoods","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,WAAAA,M,KA6BE,IAAME,EAAM,WACjB,MAA4BC,mBAASH,EAASI,OAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA3BR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAE1B,OAAQL,GACN,KAAKL,EAASa,KACZD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzD,MAEF,KAAKhB,EAASkB,OACZN,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAO9D,OAAOP,EAAUC,EAAcD,UAAYC,EAOtBO,CACnBlB,EAAiBI,EAAQE,GAG3B,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SAELD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYjB,IAAWL,EAASa,OAElCU,QAAS,WACPjB,EAAUN,EAASa,OAPvB,iCAaA,wBACEQ,KAAK,SAELD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAWL,EAASkB,SAElCK,QAAS,WACPjB,EAAUN,EAASkB,SAPvB,4BAaA,wBACEG,KAAK,SAELD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAaf,IAEfgB,QAAS,kBAAMf,GAAc,SAAAgB,GAAI,OAAKA,MANxC,sBAWEnB,IAAWL,EAASI,OAASG,IAE3B,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAUN,EAASI,OACnBI,GAAc,IALlB,sBAaN,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f05a89ca.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  name = 'name',\n  length = 'length',\n  empty = ' ',\n}\n\nfunction getSortedGoods(\n  goods: string[],\n  sortBy: SortType,\n  reverse: boolean,\n) : string[] {\n  const preparedGoods = [...goods];\n\n  switch (sortBy) {\n    case SortType.name:\n      preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n\n    case SortType.length:\n      preparedGoods.sort((good1, good2) => good1.length - good2.length);\n      break;\n\n    default:\n      break;\n  }\n\n  return reverse ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App = () => {\n  const [sortBy, setSortBy] = useState(SortType.empty);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getSortedGoods(\n    goodsFromServer, sortBy, isReversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          // className={`button is-info ${sortBy !== SortType.name ? 'is-light' : ''}`}\n          className={cn('button', 'is-info', {\n            'is-light': sortBy !== SortType.name,\n          })}\n          onClick={() => {\n            setSortBy(SortType.name);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          // className={`button is-success ${sortBy !== SortType.length ? 'is-light' : ''}`}\n          className={cn('button', 'is-success', {\n            'is-light': sortBy !== SortType.length,\n          })}\n          onClick={() => {\n            setSortBy(SortType.length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          // className={`button is-warning ${!isReversed ? 'is-light' : ''}`}\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(sortBy !== SortType.empty || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortBy(SortType.empty);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}